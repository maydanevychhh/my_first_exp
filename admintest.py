import telebot
from telebot import types
import sqlite3
import datetime
import calendar

# –¢–æ–∫–µ–Ω –∞–¥–º—ñ–Ω –±–æ—Ç–∞
ADMIN_BOT_TOKEN = '7803618226:AAE5ZODt8sY4c2oRKxnVO2VbsOjftbuBuEo'
# ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–≤–∞—à Telegram ID)
ADMIN_CHAT_ID = '360396387'

bot = telebot.TeleBot(ADMIN_BOT_TOKEN)


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ñ
def check_table_structure():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ñ bookings"""
    conn = sqlite3.connect('bookings.db')
    cursor = conn.cursor()

    try:
        cursor.execute("PRAGMA table_info(bookings)")
        columns = cursor.fetchall()
        print("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ñ bookings:")
        for col in columns:
            print(f"  {col[1]} ({col[2]})")
        return len(columns)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Ç–∞–±–ª–∏—Ü—ñ: {e}")
        return 0
    finally:
        conn.close()


# –ë–µ–∑–ø–µ—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤
def get_booking_data(booking_tuple):
    """–ë–µ–∑–ø–µ—á–Ω–æ —Ä–æ–∑–ø–∞–∫–æ–≤—É—î –¥–∞–Ω—ñ –ø—Ä–æ –∑–∞–ø–∏—Å"""
    try:
        if len(booking_tuple) >= 10:
            return {
                'id': booking_tuple[0],
                'user_id': booking_tuple[1],
                'username': booking_tuple[2] or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ',
                'first_name': booking_tuple[3] or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ',
                'phone': booking_tuple[4] or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ',
                'service': booking_tuple[5] or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ',
                'price': booking_tuple[6] or 0,
                'date': booking_tuple[7] or '',
                'time': booking_tuple[8] or '',
                'created_at': booking_tuple[9] if len(booking_tuple) > 9 else ''
            }
        else:
            # –Ø–∫—â–æ –º–µ–Ω—à–µ –∫–æ–ª–æ–Ω–æ–∫, –ø—Ä–∞—Ü—é—î–º–æ –∑ —Ç–∏–º —â–æ —î
            return {
                'id': booking_tuple[0] if len(booking_tuple) > 0 else 0,
                'user_id': booking_tuple[1] if len(booking_tuple) > 1 else 0,
                'username': booking_tuple[2] if len(booking_tuple) > 2 else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ',
                'first_name': booking_tuple[3] if len(booking_tuple) > 3 else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ',
                'phone': booking_tuple[4] if len(booking_tuple) > 4 else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ',
                'service': booking_tuple[5] if len(booking_tuple) > 5 else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ',
                'price': booking_tuple[6] if len(booking_tuple) > 6 else 0,
                'date': booking_tuple[7] if len(booking_tuple) > 7 else '',
                'time': booking_tuple[8] if len(booking_tuple) > 8 else '',
                'created_at': booking_tuple[9] if len(booking_tuple) > 9 else ''
            }
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑–ø–∞–∫—É–≤–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö: {e}")
        return None


# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id):
    return str(user_id) == str(ADMIN_CHAT_ID)


@bot.message_handler(commands=['start'])
def start(message):
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton("üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ"),
        types.KeyboardButton("üóì –ó–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
    )
    markup.add(
        types.KeyboardButton("üìä –í—Å—ñ –∑–∞–ø–∏—Å–∏"),
        types.KeyboardButton("üîç –ü–æ—à—É–∫ –∑–∞–ø–∏—Å—É")
    )
    markup.add(
        types.KeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        types.KeyboardButton("üóì –ö–∞–ª–µ–Ω–¥–∞—Ä –∑–∞–ø–∏—Å—ñ–≤")
    )

    bot.send_message(
        message.chat.id,
        "üîß –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=markup
    )


@bot.message_handler(func=lambda message: message.text == "üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ")
def today_bookings(message):
    if not is_admin(message.from_user.id):
        return

    today = datetime.date.today().strftime('%Y-%m-%d')
    show_bookings_for_date(message, today, "–ó–∞–ø–∏—Å–∏ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ")


@bot.message_handler(func=lambda message: message.text == "üóì –ó–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
def tomorrow_bookings(message):
    if not is_admin(message.from_user.id):
        return

    tomorrow = (datetime.date.today() + datetime.timedelta(days=1)).strftime('%Y-%m-%d')
    show_bookings_for_date(message, tomorrow, "–ó–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞")


@bot.message_handler(func=lambda message: message.text == "üìä –í—Å—ñ –∑–∞–ø–∏—Å–∏")
def all_bookings(message):
    if not is_admin(message.from_user.id):
        return

    conn = sqlite3.connect('bookings.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT * FROM bookings 
        ORDER BY date ASC, time ASC
        LIMIT 50
    ''')
    bookings = cursor.fetchall()
    conn.close()

    if not bookings:
        bot.send_message(message.chat.id, "üì≠ –ó–∞–ø–∏—Å—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    text = "üìä –û—Å—Ç–∞–Ω–Ω—ñ 50 –∑–∞–ø–∏—Å—ñ–≤:\n\n"

    for booking_tuple in bookings:
        booking = get_booking_data(booking_tuple)
        if booking is None:
            continue

        try:
            date_formatted = datetime.datetime.strptime(booking['date'], '%Y-%m-%d').strftime('%d.%m.%Y')
        except:
            date_formatted = booking['date']

        text += f"#{booking['id']} | {date_formatted} {booking['time']}\n"
        text += f"üë§ {booking['first_name']} (@{booking['username']})\n"
        text += f"üìû {booking['phone']}\n"
        text += f"üíÖ {booking['service']} - {booking['price']}–≥—Ä–Ω\n"
        text += "‚îÄ" * 30 + "\n"

    # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ
    if len(text) > 4000:
        parts = [text[i:i + 4000] for i in range(0, len(text), 4000)]
        for part in parts:
            bot.send_message(message.chat.id, part)
    else:
        bot.send_message(message.chat.id, text)


@bot.message_handler(func=lambda message: message.text == "üîç –ü–æ—à—É–∫ –∑–∞–ø–∏—Å—É")
def search_booking(message):
    if not is_admin(message.from_user.id):
        return

    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å—É –∞–±–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    bot.register_next_step_handler(message, handle_search)


def handle_search(message):
    search_term = message.text.strip()

    conn = sqlite3.connect('bookings.db')
    cursor = conn.cursor()

    # –ü–æ—à—É–∫ –∑–∞ ID –∞–±–æ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
    if search_term.isdigit():
        cursor.execute('SELECT * FROM bookings WHERE id = ? OR phone LIKE ?',
                       (search_term, f'%{search_term}%'))
    else:
        cursor.execute('SELECT * FROM bookings WHERE phone LIKE ? OR first_name LIKE ?',
                       (f'%{search_term}%', f'%{search_term}%'))

    bookings = cursor.fetchall()
    conn.close()

    if not bookings:
        bot.send_message(message.chat.id, "üîç –ó–∞–ø–∏—Å—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    text = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É '{search_term}':\n\n"

    for booking_tuple in bookings:
        booking = get_booking_data(booking_tuple)
        if booking is None:
            continue

        try:
            date_formatted = datetime.datetime.strptime(booking['date'], '%Y-%m-%d').strftime('%d.%m.%Y')
        except:
            date_formatted = booking['date']

        text += f"#{booking['id']} | {date_formatted} {booking['time']}\n"
        text += f"üë§ {booking['first_name']} (@{booking['username']})\n"
        text += f"üìû {booking['phone']}\n"
        text += f"üíÖ {booking['service']} - {booking['price']}–≥—Ä–Ω\n"

        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥—ñ–π –∑ –∑–∞–ø–∏—Å–æ–º
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(
            f"‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å #{booking['id']}",
            callback_data=f"cancel_{booking['id']}"
        ))

        bot.send_message(message.chat.id, text, reply_markup=markup)
        text = ""


@bot.message_handler(func=lambda message: message.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def statistics(message):
    if not is_admin(message.from_user.id):
        return

    conn = sqlite3.connect('bookings.db')
    cursor = conn.cursor()

    # –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤
    cursor.execute('SELECT COUNT(*) FROM bookings')
    total_bookings = cursor.fetchone()[0]

    # –ó–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Ö—ñ–¥
    cursor.execute('SELECT SUM(price) FROM bookings')
    total_revenue = cursor.fetchone()[0] or 0

    # –ó–∞–ø–∏—Å–∏ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
    today = datetime.date.today().strftime('%Y-%m-%d')
    cursor.execute('SELECT COUNT(*) FROM bookings WHERE date = ?', (today,))
    today_bookings = cursor.fetchone()[0]

    # –ó–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    tomorrow = (datetime.date.today() + datetime.timedelta(days=1)).strftime('%Y-%m-%d')
    cursor.execute('SELECT COUNT(*) FROM bookings WHERE date = ?', (tomorrow,))
    tomorrow_bookings = cursor.fetchone()[0]

    # –ü–æ–ø—É–ª—è—Ä–Ω—ñ –ø–æ—Å–ª—É–≥–∏
    cursor.execute('''
        SELECT service, COUNT(*) as count 
        FROM bookings 
        GROUP BY service 
        ORDER BY count DESC 
        LIMIT 5
    ''')
    popular_services = cursor.fetchall()

    conn.close()

    text = f"""üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê

üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤: {total_bookings}
üí∞ –ó–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Ö—ñ–¥: {total_revenue} –≥—Ä–Ω
üìÖ –ó–∞–ø–∏—Å–∏ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ: {today_bookings}
üóì –ó–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞: {tomorrow_bookings}

üî• –ü–æ–ø—É–ª—è—Ä–Ω—ñ –ø–æ—Å–ª—É–≥–∏:
"""

    for service, count in popular_services:
        text += f"‚Ä¢ {service}: {count} —Ä–∞–∑—ñ–≤\n"

    bot.send_message(message.chat.id, text)


@bot.message_handler(func=lambda message: message.text == "üóì –ö–∞–ª–µ–Ω–¥–∞—Ä –∑–∞–ø–∏—Å—ñ–≤")
def calendar_view(message):
    if not is_admin(message.from_user.id):
        return

    # –ü–æ–∫–∞–∑—É—î–º–æ –∫–∞–ª–µ–Ω–¥–∞—Ä –Ω–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å
    today = datetime.date.today()
    show_calendar(message, today.year, today.month)


def show_calendar(message, year, month):
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–∞–ª–µ–Ω–¥–∞—Ä
    cal = calendar.monthcalendar(year, month)
    month_name = calendar.month_name[month]

    # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è
    conn = sqlite3.connect('bookings.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT date, COUNT(*) 
        FROM bookings 
        WHERE date LIKE ?
        GROUP BY date
    ''', (f'{year:04d}-{month:02d}-%',))

    bookings_count = dict(cursor.fetchall())
    conn.close()

    text = f"üóì {month_name} {year}\n\n"
    text += "–ü–Ω –í—Ç –°—Ä –ß—Ç –ü—Ç –°–± –ù–¥\n"

    for week in cal:
        week_text = ""
        for day in week:
            if day == 0:
                week_text += "   "
            else:
                date_str = f'{year:04d}-{month:02d}-{day:02d}'
                count = bookings_count.get(date_str, 0)
                if count > 0:
                    week_text += f"{day:2d}*"
                else:
                    week_text += f"{day:2d} "
        text += week_text + "\n"

    text += "\n* - –¥–Ω—ñ –∑ –∑–∞–ø–∏—Å–∞–º–∏"

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    markup = types.InlineKeyboardMarkup()

    prev_month = month - 1 if month > 1 else 12
    prev_year = year if month > 1 else year - 1
    next_month = month + 1 if month < 12 else 1
    next_year = year if month < 12 else year + 1

    markup.add(
        types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"cal_{prev_year}_{prev_month}"),
        types.InlineKeyboardButton("‚û°Ô∏è", callback_data=f"cal_{next_year}_{next_month}")
    )

    bot.send_message(message.chat.id, text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('cal_'))
def handle_calendar_navigation(call):
    if not is_admin(call.from_user.id):
        return

    _, year, month = call.data.split('_')
    year, month = int(year), int(month)

    # –û–Ω–æ–≤–ª—é—î–º–æ –∫–∞–ª–µ–Ω–¥–∞—Ä
    cal = calendar.monthcalendar(year, month)
    month_name = calendar.month_name[month]

    conn = sqlite3.connect('bookings.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT date, COUNT(*) 
        FROM bookings 
        WHERE date LIKE ?
        GROUP BY date
    ''', (f'{year:04d}-{month:02d}-%',))

    bookings_count = dict(cursor.fetchall())
    conn.close()

    text = f"üóì {month_name} {year}\n\n"
    text += "–ü–Ω –í—Ç –°—Ä –ß—Ç –ü—Ç –°–± –ù–¥\n"

    for week in cal:
        week_text = ""
        for day in week:
            if day == 0:
                week_text += "   "
            else:
                date_str = f'{year:04d}-{month:02d}-{day:02d}'
                count = bookings_count.get(date_str, 0)
                if count > 0:
                    week_text += f"{day:2d}*"
                else:
                    week_text += f"{day:2d} "
        text += week_text + "\n"

    text += "\n* - –¥–Ω—ñ –∑ –∑–∞–ø–∏—Å–∞–º–∏"

    # –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    markup = types.InlineKeyboardMarkup()

    prev_month = month - 1 if month > 1 else 12
    prev_year = year if month > 1 else year - 1
    next_month = month + 1 if month < 12 else 1
    next_year = year if month < 12 else year + 1

    markup.add(
        types.InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"cal_{prev_year}_{prev_month}"),
        types.InlineKeyboardButton("‚û°Ô∏è", callback_data=f"cal_{next_year}_{next_month}")
    )

    bot.edit_message_text(text, call.message.chat.id, call.message.message_id, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('cancel_'))
def handle_booking_cancellation(call):
    if not is_admin(call.from_user.id):
        return

    booking_id = call.data.split('_')[1]

    # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚úÖ –¢–∞–∫, —Å–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"confirm_cancel_{booking_id}"),
        types.InlineKeyboardButton("‚ùå –ù—ñ", callback_data="cancel_action")
    )

    bot.send_message(
        call.message.chat.id,
        f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å #{booking_id}?",
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_cancel_'))
def confirm_cancellation(call):
    booking_id = call.data.split('_')[2]

    conn = sqlite3.connect('bookings.db')
    cursor = conn.cursor()
    cursor.execute('DELETE FROM bookings WHERE id = ?', (booking_id,))
    deleted = cursor.rowcount
    conn.commit()
    conn.close()

    if deleted:
        bot.edit_message_text(
            f"‚úÖ –ó–∞–ø–∏—Å #{booking_id} —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ",
            call.message.chat.id,
            call.message.message_id
        )
    else:
        bot.edit_message_text(
            f"‚ùå –ó–∞–ø–∏—Å #{booking_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
            call.message.chat.id,
            call.message.message_id
        )


@bot.callback_query_handler(func=lambda call: call.data == 'cancel_action')
def cancel_action(call):
    bot.edit_message_text(
        "‚ùå –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ",
        call.message.chat.id,
        call.message.message_id
    )


def show_bookings_for_date(message, date, title):
    """–ü–æ–∫–∞–∑—É—î –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –¥–∞—Ç–∏"""
    conn = sqlite3.connect('bookings.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT * FROM bookings 
        WHERE date = ? 
        ORDER BY time ASC
    ''', (date,))
    bookings = cursor.fetchall()
    conn.close()

    if not bookings:
        date_formatted = datetime.datetime.strptime(date, '%Y-%m-%d').strftime('%d.%m.%Y')
        bot.send_message(message.chat.id, f"üì≠ {title} ({date_formatted}): –∑–∞–ø–∏—Å—ñ–≤ –Ω–µ–º–∞—î")
        return

    date_formatted = datetime.datetime.strptime(date, '%Y-%m-%d').strftime('%d.%m.%Y')
    text = f"üìÖ {title} ({date_formatted}):\n\n"

    total_revenue = 0

    for booking_tuple in bookings:
        booking = get_booking_data(booking_tuple)
        if booking is None:
            continue

        total_revenue += booking['price']

        text += f"üïê {booking['time']} | #{booking['id']}\n"
        text += f"üë§ {booking['first_name']}\n"
        text += f"üìû {booking['phone']}\n"
        text += f"üíÖ {booking['service']} - {booking['price']}–≥—Ä–Ω\n"
        text += "‚îÄ" * 25 + "\n"

    text += f"\nüí∞ –ó–∞–≥–∞–ª—å–Ω–∏–π –¥–æ—Ö—ñ–¥ –∑–∞ –¥–µ–Ω—å: {total_revenue} –≥—Ä–Ω"
    text += f"\nüìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤: {len(bookings)}"

    # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ
    if len(text) > 4000:
        parts = [text[i:i + 4000] for i in range(0, len(text), 4000)]
        for part in parts:
            bot.send_message(message.chat.id, part)
    else:
        bot.send_message(message.chat.id, text)


# –û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.")
        return

    bot.send_message(message.chat.id, "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó üëÜ")


if __name__ == '__main__':
    print("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
    column_count = check_table_structure()
    print(f"–ó–Ω–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–æ–∫: {column_count}")

    print("–ê–¥–º—ñ–Ω –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    bot.infinity_polling()