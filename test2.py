import telebot
from telebot import types
import datetime
import sqlite3
import requests
import json
import  re

# –¢–æ–∫–µ–Ω –≤–∞—à–æ–≥–æ –∫–ª—ñ—î–Ω—Ç—Å—å–∫–æ–≥–æ –±–æ—Ç–∞
CLIENT_BOT_TOKEN = '7562102327:AAEIZcrgK1IEuy2MXmOAz1KykVGEAfs21go'
# –¢–æ–∫–µ–Ω –∞–¥–º—ñ–Ω –±–æ—Ç–∞ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
ADMIN_BOT_TOKEN = '7803618226:AAE5ZODt8sY4c2oRKxnVO2VbsOjftbuBuEo'
# ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_CHAT_ID = '360396387'

bot = telebot.TeleBot(CLIENT_BOT_TOKEN)


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def init_db():
    conn = sqlite3.connect('bookings.db')
    cursor = conn.cursor()

    # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Ç–∞–±–ª–∏—Ü—è
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS bookings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            first_name TEXT,
            phone TEXT,
            service TEXT,
            price INTEGER,
            date TEXT,
            time TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ñ —ñ –¥–æ–¥–∞—î–º–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏
    cursor.execute("PRAGMA table_info(bookings)")
    columns = [column[1] for column in cursor.fetchall()]

    if 'first_name' not in columns:
        cursor.execute('ALTER TABLE bookings ADD COLUMN first_name TEXT')

    if 'username' not in columns:
        cursor.execute('ALTER TABLE bookings ADD COLUMN username TEXT')

    if 'phone' not in columns:
        cursor.execute('ALTER TABLE bookings ADD COLUMN phone TEXT')

    if 'service' not in columns:
        cursor.execute('ALTER TABLE bookings ADD COLUMN service TEXT')

    if 'price' not in columns:
        cursor.execute('ALTER TABLE bookings ADD COLUMN price INTEGER')

    if 'date' not in columns:
        cursor.execute('ALTER TABLE bookings ADD COLUMN date TEXT')

    if 'time' not in columns:
        cursor.execute('ALTER TABLE bookings ADD COLUMN time TEXT')

    if 'created_at' not in columns:
        cursor.execute('ALTER TABLE bookings ADD COLUMN created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP')

    conn.commit()
    conn.close()


# –ü–æ—Å–ª—É–≥–∏ –∑ —Ü—ñ–Ω–∞–º–∏
SERVICES = {
    "–ö–æ—Ä–µ–∫—Ü—ñ—è + —Ñ–∞—Ä–±—É–≤–∞–Ω–Ω—è": 400,
    "–ö–æ—Ä–µ–∫—Ü—ñ—è + –ø—Ä–æ—Ä—ñ–¥–∂–µ–Ω–Ω—è": 300,
    "–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è + –∫–æ—Ä–µ–∫—Ü—ñ—è + —Ñ–∞—Ä–±—É–≤–∞–Ω–Ω—è": 600,
    "–õ–∞–º—ñ–Ω—É–≤–∞–Ω–Ω—è + –∫–æ—Ä–µ–∫—Ü—ñ—è": 500,
    "–í–∞–∫—Å–∏–Ω–≥ –∑–æ–Ω–∏ –Ω–∞ –æ–±–ª–∏—á—á—ñ": 100
}

# –ß–∞—Å–∏ –¥–ª—è –∑–∞–ø–∏—Å—É
TIME_SLOTS = ["10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00"]

# –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
user_data = {}


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è"))
    markup.add(types.KeyboardButton("‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"))

    bot.send_message(
        message.chat.id,
        "–í—ñ—Ç–∞—é! üå∏\n\n–Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –ø–æ—Å–ª—É–≥–∏ –∑ –¥–æ–≥–ª—è–¥—É –∑–∞ –±—Ä–æ–≤–∞–º–∏.\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=markup
    )


@bot.message_handler(func=lambda message: message.text == "üìÖ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è")
def book_appointment(message):
    markup = types.InlineKeyboardMarkup()
    for service, price in SERVICES.items():
        markup.add(types.InlineKeyboardButton(
            f"{service} - {price} –≥—Ä–Ω",
            callback_data=f"service_{list(SERVICES.keys()).index(service)}"
        ))

    bot.send_message(
        message.chat.id,
        "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É:",
        reply_markup=markup
    )


@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")
def info(message):
    info_text = "üìã –ù–∞—à—ñ –ø–æ—Å–ª—É–≥–∏:\n\n"
    for service, price in SERVICES.items():
        info_text += f"‚Ä¢ {service} - {price} –≥—Ä–Ω\n"

    info_text += "\n‚è∞ –ß–∞—Å —Ä–æ–±–æ—Ç–∏: 10:00 - 18:00\nüìç –ê–¥—Ä–µ—Å–∞: [–ö–∏—ó–≤—Å—å–∫–∞ 14–ë]"

    bot.send_message(message.chat.id, info_text)


@bot.callback_query_handler(func=lambda call: call.data.startswith('service_'))
def handle_service_selection(call):
    service_index = int(call.data.split('_')[1])
    service_name = list(SERVICES.keys())[service_index]

    user_data[call.from_user.id] = {
        'service': service_name,
        'price': SERVICES[service_name]
    }

    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–∞—Ç –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—ñ 14 –¥–Ω—ñ–≤
    markup = types.InlineKeyboardMarkup()
    today = datetime.date.today()

    for i in range(1, 15):  # –ü–æ—á–∏–Ω–∞—î–º–æ –∑ –∑–∞–≤—Ç—Ä–∞—à–Ω—å–æ–≥–æ –¥–Ω—è
        date = today + datetime.timedelta(days=i)
        if date.weekday() < 6:  # –ü–Ω-–°–± (0-5)
            date_str = date.strftime("%d.%m.%Y")
            weekday = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–ù–¥"][date.weekday()]
            markup.add(types.InlineKeyboardButton(
                f"{weekday} {date_str}",
                callback_data=f"date_{date.strftime('%Y-%m-%d')}"
            ))

    bot.edit_message_text(
        f"–í–∏ –æ–±—Ä–∞–ª–∏: {service_name} - {SERVICES[service_name]} –≥—Ä–Ω\n\n–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith('date_'))
def handle_date_selection(call):
    selected_date = call.data.split('_')[1]
    user_data[call.from_user.id]['date'] = selected_date

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ —á–∞—Å–∏ –¥–ª—è –≤–∏–±—Ä–∞–Ω–æ—ó –¥–∞—Ç–∏
    available_times = get_available_times(selected_date)

    markup = types.InlineKeyboardMarkup()
    for time_slot in available_times:
        markup.add(types.InlineKeyboardButton(
            time_slot,
            callback_data=f"time_{time_slot}"
        ))

    if not available_times:
        markup.add(types.InlineKeyboardButton(
            "‚Üê –ù–∞–∑–∞–¥ –¥–æ –≤–∏–±–æ—Ä—É –¥–∞—Ç–∏",
            callback_data="back_to_dates"
        ))
        text = "–ù–∞ –∂–∞–ª—å, –Ω–∞ —Ü—é –¥–∞—Ç—É –Ω–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö —Å–ª–æ—Ç—ñ–≤. –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –¥–∞—Ç—É."
    else:
        text = f"–î–∞—Ç–∞: {datetime.datetime.strptime(selected_date, '%Y-%m-%d').strftime('%d.%m.%Y')}\n\n–û–±–µ—Ä—ñ—Ç—å —á–∞—Å:"

    bot.edit_message_text(
        text,
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith('time_'))
def handle_time_selection(call):
    selected_time = call.data.split('_')[1]
    user_data[call.from_user.id]['time'] = selected_time

    bot.edit_message_text(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∑–≤'—è–∑–∫—É:",
        call.message.chat.id,
        call.message.message_id
    )

    bot.register_next_step_handler(call.message, get_phone_number)


def get_phone_number(message):
    if message.content_type != 'text':
        bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —Ç–µ–∫—Å—Ç–æ–º:")
        bot.register_next_step_handler(message, get_phone_number)
        return

    phone = message.text.strip()
    user_id = message.from_user.id

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: —á–∏ —Ü–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, +380 –∞–±–æ 0XXX...)
    phone_pattern = re.compile(r'^(\+380\d{9}|0\d{9})$')
    if not phone_pattern.match(phone):
        bot.send_message(message.chat.id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX –∞–±–æ 0XXXXXXXXX:")
        bot.register_next_step_handler(message, get_phone_number)
        return

    if user_id not in user_data:
        bot.send_message(message.chat.id, "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É /start")
        return
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É
    user_data[user_id]['phone'] = phone
    # –ü–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    data = user_data[user_id]
    date_formatted = datetime.datetime.strptime(data['date'], '%Y-%m-%d').strftime('%d.%m.%Y')

    confirmation_text = f"""
üìã –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É:

üë§ –Ü–º'—è: {message.from_user.first_name or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}
üíÖ –ü–æ—Å–ª—É–≥–∞: {data['service']}
üí∞ –¶—ñ–Ω–∞: {data['price']} –≥—Ä–Ω
üìÖ –î–∞—Ç–∞: {date_formatted}
üïê –ß–∞—Å: {data['time']}

–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–ø–∏—Å?
    """

    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm_booking"),
        types.InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_booking")
    )

    bot.send_message(message.chat.id, confirmation_text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'confirm_booking')
def confirm_booking(call):
    user_id = call.from_user.id

    if user_id not in user_data:
        bot.answer_callback_query(call.id, "–î–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    data = user_data[user_id]

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    conn = sqlite3.connect('bookings.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO bookings (user_id, username, first_name, phone, service, price, date, time)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    ''', (
        user_id,
        call.from_user.username or '',
        call.from_user.first_name or '',
        data['phone'],
        data['service'],
        data['price'],
        data['date'],
        data['time']
    ))
    conn.commit()
    booking_id = cursor.lastrowid
    conn.close()

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
    send_admin_notification(data, call.from_user, booking_id)

    # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –∫–ª—ñ—î–Ω—Ç—É
    date_formatted = datetime.datetime.strptime(data['date'], '%Y-%m-%d').strftime('%d.%m.%Y')

    bot.edit_message_text(
        f"‚úÖ –í–∞—à –∑–∞–ø–∏—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!\n\n"
        f"üìã –ù–æ–º–µ—Ä –∑–∞–ø–∏—Å—É: #{booking_id}\n"
        f"üìÖ {date_formatted} –æ {data['time']}\n"
        f"üíÖ {data['service']}\n"
        f"üí∞ {data['price']} –≥—Ä–Ω\n\n"
        f"–û—á—ñ–∫—É—î–º–æ –Ω–∞ –≤–∞—Å! üå∏\n"
        f"–ü—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
        call.message.chat.id,
        call.message.message_id
    )

    # –û—á–∏—â—É—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ
    del user_data[user_id]


@bot.callback_query_handler(func=lambda call: call.data == 'cancel_booking')
def cancel_booking(call):
    user_id = call.from_user.id
    if user_id in user_data:
        del user_data[user_id]

    bot.edit_message_text(
        "‚ùå –ó–∞–ø–∏—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ.\n\n–î–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å üìÖ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—è",
        call.message.chat.id,
        call.message.message_id
    )


def get_available_times(date):
    """–û—Ç—Ä–∏–º—É—î –¥–æ—Å—Ç—É–ø–Ω—ñ —á–∞—Å–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –¥–∞—Ç–∏"""
    conn = sqlite3.connect('bookings.db')
    cursor = conn.cursor()
    cursor.execute('SELECT time FROM bookings WHERE date = ?', (date,))
    booked_times = [row[0] for row in cursor.fetchall()]
    conn.close()

    available = [time for time in TIME_SLOTS if time not in booked_times]
    return available


def send_admin_notification(data, user, booking_id):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å"""
    date_formatted = datetime.datetime.strptime(data['date'], '%Y-%m-%d').strftime('%d.%m.%Y')

    admin_text = f"""
üÜï –ù–û–í–ò–ô –ó–ê–ü–ò–° #{booking_id}

üë§ –ö–ª—ñ—î–Ω—Ç: {user.first_name or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
üì± Username: @{user.username or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}
üíÖ –ü–æ—Å–ª—É–≥–∞: {data['service']}
üí∞ –¶—ñ–Ω–∞: {data['price']} –≥—Ä–Ω
üìÖ –î–∞—Ç–∞: {date_formatted}
üïê –ß–∞—Å: {data['time']}
üìä ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user.id}
    """

    try:
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —á–µ—Ä–µ–∑ API –∞–¥–º—ñ–Ω –±–æ—Ç–∞
        url = f"https://api.telegram.org/bot{ADMIN_BOT_TOKEN}/sendMessage"
        payload = {
            'chat_id': ADMIN_CHAT_ID,
            'text': admin_text,
            'parse_mode': 'HTML'
        }
        requests.post(url, json=payload)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")


if __name__ == '__main__':
    init_db()
    print("–ö–ª—ñ—î–Ω—Ç—Å—å–∫–∏–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    bot.infinity_polling()